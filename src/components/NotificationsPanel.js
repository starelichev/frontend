import React, { useState, useEffect } from 'react';
import * as signalR from '@microsoft/signalr';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

const NotificationsPanel = () => {
  const [notifications, setNotifications] = useState([]);
  const [events, setEvents] = useState([]);
  const [activeTab, setActiveTab] = useState('events');
  const [connection, setConnection] = useState(null);

  useEffect(() => {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SignalR
    const newConnection = new signalR.HubConnectionBuilder()
        .withUrl(`${API_URL}/notificationHub`, {
          withCredentials: true
        })
        .withAutomaticReconnect()
        .build();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    newConnection.on('ReceiveUserAction', (userAction) => {
      setNotifications(prev => {
        const newNotifications = [
          {
            id: userAction.id,
            type: 'action',
            icon: getActionIcon(userAction.actionCode),
            title: userAction.actionName,
            description: userAction.description,
            date: new Date(userAction.date),
            user: `${userAction.userName} ${userAction.userSurname}`.trim()
          },
          ...prev
        ];
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        return newNotifications.slice(0, 5);
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è UserActionCreated
    newConnection.on('UserActionCreated', (userAction) => {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ localStorage
      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
      const userName = currentUser.name && currentUser.surname 
        ? `${currentUser.name} ${currentUser.surname}` 
        : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      setNotifications(prev => {
        const newNotifications = [
          {
            id: userAction.id,
            type: 'action',
            icon: getActionIcon('SCAN_INTERVAL'), // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø—Ä–æ—Å–∞
            title: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø—Ä–æ—Å–∞',
            description: userAction.description,
            date: new Date(userAction.date),
            user: userName
          },
          ...prev
        ];
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        return newNotifications.slice(0, 5);
      });
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    newConnection.start()
      .then(() => {
        console.log('SignalR Connected');
        newConnection.invoke('JoinNotificationGroup');
      })
      .catch(err => console.error('SignalR Connection Error: ', err));

    setConnection(newConnection);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    loadRecentActions();
    loadRecentEvents();

    return () => {
      if (newConnection) {
        newConnection.stop();
      }
    };
  }, []);

  const loadRecentActions = async () => {
    try {
      const response = await fetch(`${API_URL}/api/UserActions/log`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          periodType: 'new'
        })
      });

      if (response.ok) {
        const data = await response.json();
        const recentActions = data.userActions.slice(0, 5).map(action => ({
          id: action.id,
          type: 'action',
          icon: getActionIcon(action.actionCode),
          title: action.actionName,
          description: action.description,
          date: new Date(action.date),
          user: `${action.userName} ${action.userSurname}`.trim()
        }));
        
        setNotifications(recentActions);
      }
    } catch (error) {
      console.error('Error loading recent actions:', error);
    }
  };

  const loadRecentEvents = async () => {
    try {
      const response = await fetch(`${API_URL}/api/Event/log`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          periodType: 'new'
        })
      });

      if (response.ok) {
        const data = await response.json();
        const recentEvents = data.events.slice(0, 5).map(event => ({
          id: event.id,
          type: 'event',
          icon: getEventIcon(event.eventCode),
          title: event.eventName,
          description: event.eventDescription,
          date: new Date(event.date),
          object: event.objectName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç'
        }));
        
        setEvents(recentEvents);
      }
    } catch (error) {
      console.error('Error loading recent events:', error);
    }
  };

  const getActionIcon = (actionCode) => {
    switch (actionCode) {
      case 'LOGIN':
        return 'üîµ'; // –°–∏–Ω–∏–π –∫—Ä—É–≥ –¥–ª—è –≤—Ö–æ–¥–∞
      case 'LOGOUT':
        return 'üî¥'; // –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è –≤—ã—Ö–æ–¥–∞
      case 'EDIT_COMMENT':
        return 'üü°'; // –ñ–µ–ª—Ç—ã–π –∫—Ä—É–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      case 'EDIT_LAST_RECEIVE':
        return 'üü¢'; // –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ–≤–µ—Ä–∫–∏
      case 'SCAN_INTERVAL':
        return '‚è±Ô∏è'; // –¢–∞–π–º–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø—Ä–æ—Å–∞
      default:
        return '‚ö™'; // –ë–µ–ª—ã–π –∫—Ä—É–≥ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    }
  };

  const getEventIcon = (eventCode) => {
    switch (eventCode) {
      case 'ALARM':
        return 'üö®'; // –°–∏—Ä–µ–Ω–∞ –¥–ª—è —Ç—Ä–µ–≤–æ–≥–∏
      case 'WARNING':
        return '‚ö†Ô∏è'; // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      case 'INFO':
        return '‚ÑπÔ∏è'; // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      case 'ERROR':
        return '‚ùå'; // –û—à–∏–±–∫–∞
      default:
        return 'üìã'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–±—ã—Ç–∏–π
    }
  };

  const formatTime = (date) => {
    const now = new Date();
    const diff = now - date;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);

    if (minutes < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
    return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
      <h3 className="text-black font-semibold mb-4">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:</h3>
      
      {/* –¢–∞–±—ã */}
      <div className="flex mb-4">
        <button
          onClick={() => setActiveTab('events')}
          className={`px-4 py-2 rounded-l-lg text-sm font-medium transition-colors ${
            activeTab === 'events'
              ? 'bg-gray-700 text-white'
              : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
          }`}
        >
          –°–æ–±—ã—Ç–∏—è
        </button>
        <button
          onClick={() => setActiveTab('actions')}
          className={`px-4 py-2 rounded-r-lg text-sm font-medium transition-colors ${
            activeTab === 'actions'
              ? 'bg-gray-700 text-white'
              : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
          }`}
        >
          –î–µ–π—Å—Ç–≤–∏—è
        </button>
      </div>

             {/* –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
       <div className="max-h-64 overflow-y-auto">
         {activeTab === 'actions' && notifications.length > 0 ? (
           notifications.map((notification) => (
             <div key={notification.id} className="flex items-start space-x-3 py-3 border-b border-gray-100 last:border-b-0">
               <div className="text-xl">{notification.icon}</div>
               <div className="flex-1 min-w-0">
                 <div className="text-sm text-gray-900 font-medium">{notification.title}</div>
                 <div className="text-xs text-gray-600 mt-1">{notification.description}</div>
                 <div className="text-xs text-gray-500 mt-1">
                   {notification.user} ‚Ä¢ {formatTime(notification.date)}
                 </div>
               </div>
             </div>
           ))
         ) : activeTab === 'actions' && notifications.length === 0 ? (
           <div className="text-center text-gray-500 py-8">
             <div className="text-2xl mb-2">üë§</div>
             <div className="text-sm">–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</div>
           </div>
         ) : activeTab === 'events' && events.length > 0 ? (
           events.map((event) => (
             <div key={event.id} className="flex items-start space-x-3 py-3 border-b border-gray-100 last:border-b-0">
               <div className="text-xl">{event.icon}</div>
               <div className="flex-1 min-w-0">
                 <div className="text-sm text-gray-900 font-medium">{event.title}</div>
                 <div className="text-xs text-gray-600 mt-1">{event.description}</div>
                 <div className="text-xs text-gray-500 mt-1">
                   {event.object} ‚Ä¢ {formatTime(event.date)}
                 </div>
               </div>
             </div>
           ))
         ) : (
           <div className="text-center text-gray-500 py-8">
             <div className="text-2xl mb-2">üìã</div>
             <div className="text-sm">–°–æ–±—ã—Ç–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</div>
           </div>
         )}
       </div>
    </div>
  );
};

export default NotificationsPanel; 